# üöÄ MCP Saludia - Gesti√≥n de Iniciativas con AI para Equipos Internos
import os
import json
from datetime import datetime
from flask import Flask, jsonify, request
from flask_cors import CORS
import requests
import logging

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask app
app = Flask(__name__)
CORS(app)

# Configuraci√≥n
NOCODB_BASE_URL = "https://nocodb.farmuhub.co/api/v2"
NOCODB_TABLE_ID = "m274d90cy3x6ra3"
NOCODB_TOKEN = "-kgNP5Q5G54nlDXPei7IO9PMMyE4pIgxYCi6o17Y"
TELEGRAM_TOKEN = "8309791895:AAGxfmPQ_yvgNY-kyMMDrKR0srb7c20KL5Q"
WEBHOOK_URL = "https://mpciniciativas.onrender.com"

# Configuraci√≥n LLM - Groq
GROQ_API_KEY = os.environ.get('GROQ_API_KEY', '')
GROQ_MODEL = "llama-3.1-8b-instant"

# Variables globales
user_states = {}
bot_configured = False

def get_initiatives():
    """Obtener iniciativas de NocoDB"""
    try:
        url = f"{NOCODB_BASE_URL}/tables/{NOCODB_TABLE_ID}/records"
        headers = {'accept': 'application/json', 'xc-token': NOCODB_TOKEN}
        params = {'limit': 100}  # Aumentado para obtener m√°s datos
        
        response = requests.get(url, headers=headers, params=params, timeout=20)
        
        if response.status_code == 200:
            data = response.json()
            initiatives = data.get('list', [])
            logger.info(f"‚úÖ Retrieved {len(initiatives)} initiatives from NocoDB")
            return {"success": True, "data": initiatives}
        else:
            logger.error(f"‚ùå NocoDB HTTP {response.status_code}")
            return {"success": False, "error": f"HTTP {response.status_code}"}
    except Exception as e:
        logger.error(f"‚ùå Error fetching initiatives: {e}")
        return {"success": False, "error": str(e)}

def create_initiative(data):
    """Crear iniciativa en NocoDB"""
    try:
        url = f"{NOCODB_BASE_URL}/tables/{NOCODB_TABLE_ID}/records"
        headers = {
            'accept': 'application/json',
            'xc-token': NOCODB_TOKEN,
            'Content-Type': 'application/json'
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=20)
        
        if response.status_code in [200, 201]:
            logger.info(f"‚úÖ Created initiative: {data.get('initiative_name', 'Unknown')}")
            return {"success": True, "data": response.json()}
        else:
            logger.error(f"‚ùå Create failed HTTP {response.status_code}")
            return {"success": False, "error": f"HTTP {response.status_code}"}
    except Exception as e:
        logger.error(f"‚ùå Error creating initiative: {e}")
        return {"success": False, "error": str(e)}

def search_initiatives(query, field="all"):
    """Buscar iniciativas por t√©rmino"""
    try:
        data = get_initiatives()
        
        if not data.get("success"):
            return {"success": False, "error": data.get("error"), "results": []}
        
        initiatives = data.get("data", [])
        matching = []
        query_lower = query.lower()
        
        search_fields = {
            "all": ['initiative_name', 'description', 'owner', 'team', 'main_kpi', 'portal'],
            "name": ['initiative_name'],
            "owner": ['owner'],
            "team": ['team'],
            "kpi": ['main_kpi'],
            "portal": ['portal'],
            "description": ['description']
        }
        
        fields_to_search = search_fields.get(field, search_fields["all"])
        
        for initiative in initiatives:
            if not isinstance(initiative, dict):
                continue
                
            for field_name in fields_to_search:
                if field_name in initiative:
                    field_value = str(initiative[field_name]).lower()
                    if query_lower in field_value:
                        matching.append(initiative)
                        break
        
        logger.info(f"‚úÖ Search '{query}' found {len(matching)} results")
        return {"success": True, "results": matching, "total": len(matching)}
        
    except Exception as e:
        logger.error(f"‚ùå Error searching initiatives: {e}")
        return {"success": False, "error": str(e), "results": []}

def query_llm(prompt, context=None):
    """Consultar LLM con prompt personalizado para Saludia"""
    if not GROQ_API_KEY:
        return {"success": False, "error": "LLM no configurado", "response": "El asistente AI no est√° disponible en este momento."}
    
    try:
        url = "https://api.groq.com/openai/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # PROMPT PERSONALIZADO PARA SALUDIA
        system_message = """Eres el Asistente de Iniciativas de Saludia, especializado en gesti√≥n estrat√©gica para equipos internos.

üè¢ SOBRE SALUDIA:
- Marketplace l√≠der que conecta droguer√≠as independientes con sellers y laboratorios
- Modelo de negocio: Plataforma que facilita transacciones B2B en el sector farmac√©utico
- Stakeholders principales: Droguer√≠as (compradores), Sellers/Laboratorios (vendedores), equipo interno
- Misi√≥n: Democratizar el acceso a productos farmac√©uticos para droguer√≠as independientes

üë• EQUIPOS INTERNOS DE SALUDIA:
- Product: Desarrollo de funcionalidades del marketplace
- Engineering: Infraestructura t√©cnica y APIs
- Operations: Gesti√≥n de operaciones y fulfillment
- Sales: Acquisition de droguer√≠as y sellers
- Marketing: Growth y retenci√≥n de usuarios
- Customer Success: Soporte y satisfacci√≥n de clientes
- Data/Analytics: Business intelligence y m√©tricas

üéØ PORTALES/PRODUCTOS:
- Admin: Panel interno para gesti√≥n operacional
- Droguer√≠a: Interfaz para compradores (droguer√≠as)
- Seller: Interfaz para vendedores (laboratorios/distribuidores)
- Mobile: Apps m√≥viles para ambos segmentos
- API: Integraciones con sistemas externos

üìä M√âTRICAS DE INICIATIVAS:
- Reach (0-1): Alcance/cobertura (% de usuarios impactados)
- Impact (0-1): Impacto en m√©tricas clave del negocio
- Confidence (0-1): Nivel de confianza en el √©xito
- Effort (0-1): Esfuerzo/recursos requeridos para implementar

üéØ TU EXPERTISE COMO CONSULTOR:
- An√°lisis de portfolio de iniciativas internas
- Optimizaci√≥n de recursos entre equipos
- Identificaci√≥n de gaps en experiencia de droguer√≠as/sellers
- Recomendaciones para mejorar GMV, retenci√≥n y satisfacci√≥n
- Detecci√≥n de oportunidades de automatizaci√≥n y eficiencia operacional
- Balance entre growth initiatives vs operational excellence

üí° ESTILO DE RESPUESTA:
- Profesional pero cercano para equipos internos
- Usa emojis estrat√©gicamente para claridad
- Estructura informaci√≥n con bullet points cuando sea √∫til
- Proporciona insights accionables espec√≠ficos para marketplace
- Considera el impacto en ambos lados del marketplace (supply & demand)
- Enf√≥cate en m√©tricas que importan: GMV, Take Rate, Retention, NPS
- Siempre en espa√±ol

üîç CUANDO ANALICES INICIATIVAS:
1. Eval√∫a balance entre iniciativas de growth vs operational
2. Identifica oportunidades de colaboraci√≥n cross-team
3. Considera impacto en ambos lados: droguer√≠as Y sellers
4. Busca gaps en customer experience o friction points
5. Eval√∫a potencial de automatizaci√≥n para reducir costos operacionales
6. Sugiere KPIs complementarios alineados al negocio del marketplace

üöÄ CONTEXTO DE MARKETPLACE FARMAC√âUTICO:
- Industria altamente regulada y tradicional
- Importancia de confianza y reliability en transacciones
- Necesidad de gesti√≥n eficiente de inventario y log√≠stica
- Oportunidades en digitalizaci√≥n de procesos tradicionales

Tu objetivo: Ayudar a los equipos internos a optimizar iniciativas para maximizar el crecimiento y eficiencia del marketplace."""

        messages = [{"role": "system", "content": system_message}]
        
        # Agregar contexto si se proporciona
        if context:
            context_message = f"üìã DATOS ACTUALES DE INICIATIVAS:\n{context}\n\nüí≠ Analiza considerando los objetivos estrat√©gicos de Saludia como marketplace."
            messages.append({"role": "user", "content": context_message})
        
        # Agregar la consulta del usuario
        messages.append({"role": "user", "content": prompt})
        
        data = {
            "model": GROQ_MODEL,
            "messages": messages,
            "max_tokens": 800,
            "temperature": 0.7
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            ai_response = result['choices'][0]['message']['content']
            
            logger.info(f"‚úÖ LLM query successful")
            return {"success": True, "response": ai_response}
        else:
            logger.error(f"‚ùå LLM HTTP {response.status_code}: {response.text}")
            return {"success": False, "error": f"HTTP {response.status_code}", "response": "Error consultando el asistente AI."}
    
    except Exception as e:
        logger.error(f"‚ùå Error querying LLM: {e}")
        return {"success": False, "error": str(e), "response": "Error t√©cnico del asistente AI."}

def analyze_initiatives_with_llm(initiatives):
    """Analizar iniciativas usando LLM"""
    if not initiatives:
        return "No hay iniciativas para analizar."
    
    # Preparar contexto detallado para el LLM
    context = f"PORTFOLIO ACTUAL DE SALUDIA ({len(initiatives)} iniciativas):\n\n"
    
    # Agrupar por equipos para mejor an√°lisis
    teams = {}
    for init in initiatives:
        team = init.get('team', 'Sin equipo')
        if team not in teams:
            teams[team] = []
        teams[team].append(init)
    
    for team, team_initiatives in teams.items():
        context += f"üìã EQUIPO {team.upper()} ({len(team_initiatives)} iniciativas):\n"
        for init in team_initiatives:
            name = init.get('initiative_name', 'Sin nombre')
            owner = init.get('owner', 'Sin owner')
            kpi = init.get('main_kpi', 'Sin KPI')
            portal = init.get('portal', 'Sin portal')
            reach = init.get('reach', 'N/A')
            impact = init.get('impact', 'N/A')
            confidence = init.get('confidence', 'N/A')
            effort = init.get('effort', 'N/A')
            
            context += f"  ‚Ä¢ {name}\n"
            context += f"    Owner: {owner} | KPI: {kpi} | Portal: {portal}\n"
            context += f"    M√©tricas: R:{reach} I:{impact} C:{confidence} E:{effort}\n"
        context += "\n"
    
    prompt = """Realiza un an√°lisis estrat√©gico completo del portfolio de iniciativas de Saludia.

AN√ÅLISIS REQUERIDO:
1. üìä Distribuci√≥n de recursos y esfuerzo entre equipos
2. üéØ Balance entre iniciativas de growth vs operational excellence
3. üîÑ Oportunidades de sinergia cross-team para el marketplace
4. ‚ö†Ô∏è Gaps cr√≠ticos en experiencia de droguer√≠as o sellers
5. üìà Recomendaciones espec√≠ficas para maximizar GMV y retenci√≥n

Enf√≥cate en insights accionables para l√≠deres de equipos internos."""
    
    result = query_llm(prompt, context)
    return result.get("response", "Error analizando iniciativas.")

def format_initiative_detailed(initiative, index=None):
    """Formatear iniciativa con informaci√≥n detallada"""
    try:
        name = initiative.get('initiative_name', 'Sin nombre')
        description = initiative.get('description', 'Sin descripci√≥n')
        owner = initiative.get('owner', 'Sin owner')
        team = initiative.get('team', 'Sin equipo')
        kpi = initiative.get('main_kpi', 'Sin KPI')
        portal = initiative.get('portal', 'Sin portal')
        
        # M√©tricas con validaci√≥n
        reach = initiative.get('reach', 0)
        impact = initiative.get('impact', 0)
        confidence = initiative.get('confidence', 0)
        effort = initiative.get('effort', 0)
        
        # Convertir a n√∫meros si es posible
        try:
            reach = float(reach) if reach else 0
            impact = float(impact) if impact else 0
            confidence = float(confidence) if confidence else 0
            effort = float(effort) if effort else 0
        except:
            reach = impact = confidence = effort = 0
        
        # Formatear m√©tricas como porcentajes
        reach_pct = f"{reach*100:.0f}%" if reach > 0 else "N/A"
        impact_pct = f"{impact*100:.0f}%" if impact > 0 else "N/A"
        confidence_pct = f"{confidence*100:.0f}%" if confidence > 0 else "N/A"
        effort_pct = f"{effort*100:.0f}%" if effort > 0 else "N/A"
        
        prefix = f"**{index}.** " if index else ""
        
        formatted = f"""{prefix}üéØ **{name}**
üìù {description[:100]}{'...' if len(description) > 100 else ''}
üë§ **Owner:** {owner} | üë• **Equipo:** {team}
üìä **KPI:** {kpi} | üñ•Ô∏è **Portal:** {portal}
üìà **M√©tricas:** Alcance {reach_pct} | Impacto {impact_pct} | Confianza {confidence_pct} | Esfuerzo {effort_pct}"""
        
        return formatted
        
    except Exception as e:
        logger.error(f"Error formatting initiative: {e}")
        return f"{index}. **{initiative.get('initiative_name', 'Error de formato')}**"

def send_telegram_message(chat_id, text, parse_mode=None):
    """Enviar mensaje a Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text
        }
        if parse_mode:
            data["parse_mode"] = parse_mode
        
        response = requests.post(url, json=data, timeout=10)
        return response.status_code == 200
    except Exception as e:
        logger.error(f"‚ùå Error sending message: {e}")
        return False

def setup_webhook():
    """Configurar webhook de Telegram"""
    try:
        # Eliminar webhook existente
        delete_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook"
        requests.post(delete_url, timeout=10)
        
        # Configurar nuevo webhook
        webhook_url = f"{WEBHOOK_URL}/telegram-webhook"
        set_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
        data = {"url": webhook_url}
        
        response = requests.post(set_url, json=data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("ok"):
                logger.info(f"‚úÖ Webhook configured: {webhook_url}")
                return True
            else:
                logger.error(f"‚ùå Webhook setup failed: {result}")
                return False
        else:
            logger.error(f"‚ùå Webhook HTTP {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Error setting up webhook: {e}")
        return False

# ===== ENDPOINTS FLASK =====

@app.route('/')
def home():
    """Endpoint principal"""
    return jsonify({
        "name": "Saludia Initiatives MCP Server",
        "version": "2.0.0",
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "company": "Saludia Marketplace",
        "description": "Sistema de gesti√≥n de iniciativas para equipos internos",
        "telegram_bot": {
            "enabled": bool(TELEGRAM_TOKEN),
            "webhook_configured": bot_configured,
            "webhook_url": f"{WEBHOOK_URL}/telegram-webhook" if TELEGRAM_TOKEN else None
        },
        "ai_assistant": {
            "enabled": bool(GROQ_API_KEY),
            "model": GROQ_MODEL,
            "provider": "Groq",
            "specialized_for": "Saludia marketplace context"
        }
    })

@app.route('/health')
def health():
    """Health check detallado"""
    nocodb_test = get_initiatives()
    
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "flask": "running",
            "nocodb": "ok" if nocodb_test.get('success') else "error",
            "telegram_bot": "webhook_configured" if bot_configured else "not_configured",
            "ai_assistant": "configured" if GROQ_API_KEY else "not_configured"
        },
        "bot_info": {
            "webhook_configured": bot_configured,
            "active_sessions": len(user_states)
        },
        "nocodb_info": {
            "connection": "ok" if nocodb_test.get('success') else "failed",
            "initiatives_count": len(nocodb_test.get('data', [])) if nocodb_test.get('success') else 0
        },
        "ai_info": {
            "provider": "Groq",
            "model": GROQ_MODEL,
            "context": "Saludia marketplace operations",
            "api_key_configured": bool(GROQ_API_KEY)
        }
    })

@app.route('/setup-webhook', methods=['POST'])
def setup_webhook_endpoint():
    """Endpoint para configurar webhook"""
    global bot_configured
    
    try:
        success = setup_webhook()
        bot_configured = success
        
        return jsonify({
            "success": success,
            "webhook_configured": bot_configured,
            "webhook_url": f"{WEBHOOK_URL}/telegram-webhook",
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/api/initiatives')
def api_initiatives():
    """API para obtener iniciativas"""
    data = get_initiatives()
    return jsonify(data)

@app.route('/api/initiatives/search', methods=['GET'])
def api_search_initiatives():
    """API para buscar iniciativas"""
    query = request.args.get('q', '').strip()
    field = request.args.get('field', 'all')
    
    if not query:
        return jsonify({"error": "Query parameter 'q' is required"}), 400
    
    result = search_initiatives(query, field)
    return jsonify(result)

@app.route('/api/create', methods=['POST'])
def api_create():
    """API para crear iniciativa"""
    if not request.json:
        return jsonify({"error": "JSON required"}), 400
    
    result = create_initiative(request.json)
    return jsonify(result)

@app.route('/ai/query', methods=['POST'])
def ai_query_endpoint():
    """Endpoint para consultar el LLM directamente"""
    if not request.json or 'prompt' not in request.json:
        return jsonify({"error": "Prompt required"}), 400
    
    prompt = request.json['prompt']
    context = request.json.get('context')
    
    result = query_llm(prompt, context)
    return jsonify(result)

@app.route('/ai/analyze-initiatives', methods=['POST'])
def analyze_initiatives_endpoint():
    """Endpoint para analizar iniciativas con AI"""
    try:
        data = get_initiatives()
        
        if not data.get("success"):
            return jsonify({
                "success": False,
                "error": "No se pudieron obtener las iniciativas",
                "analysis": "Error al acceder a los datos."
            }), 500
        
        initiatives = data.get("data", [])
        analysis = analyze_initiatives_with_llm(initiatives)
        
        return jsonify({
            "success": True,
            "initiatives_count": len(initiatives),
            "analysis": analysis,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "analysis": "Error t√©cnico durante el an√°lisis."
        }), 500

# ===== BOT DE TELEGRAM =====

@app.route('/telegram-webhook', methods=['POST'])
def telegram_webhook():
    """Webhook para recibir mensajes de Telegram"""
    try:
        update_data = request.get_json()
        
        if not update_data:
            return "OK", 200
        
        # Procesar el mensaje
        if 'message' in update_data:
            message = update_data['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            
            # Comandos
            if 'text' in message:
                text = message['text'].strip()
                
                if text == '/start':
                    handle_start_command(chat_id)
                elif text == '/help':
                    handle_help_command(chat_id)
                elif text == '/iniciativas':
                    handle_list_initiatives(chat_id)
                elif text == '/crear':
                    handle_create_command(chat_id, user_id)
                elif text == '/analizar' or text == '/analyze':
                    handle_analyze_command(chat_id)
                elif text.startswith('/buscar ') or text.startswith('/search '):
                    query = text.split(' ', 1)[1] if ' ' in text else ""
                    if query:
                        handle_search_command(chat_id, query)
                    else:
                        send_telegram_message(chat_id, "‚ùì Uso: /buscar <t√©rmino>\n\nEjemplo: /buscar Product")
                elif text.startswith('/preguntar ') or text.startswith('/ask '):
                    question = text.split(' ', 1)[1] if ' ' in text else ""
                    if question:
                        handle_ai_question(chat_id, question)
                    else:
                        send_telegram_message(chat_id, "‚ùì Uso: /preguntar <tu pregunta>\n\nEjemplo: /preguntar ¬øQu√© iniciativas necesita el equipo de Sales?")
                elif text.startswith('/'):
                    # Comando desconocido
                    send_telegram_message(chat_id, "‚ùì Comando no reconocido. Usa /help para ver comandos disponibles.")
                else:
                    # Mensaje de texto - proceso de creaci√≥n o consulta AI
                    if user_id in user_states:
                        handle_text_message(chat_id, user_id, text)
                    else:
                        # Consulta general al AI
                        handle_ai_question(chat_id, text)
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return "ERROR", 500

def handle_start_command(chat_id):
    """Manejar comando /start"""
    logger.info(f"üì± /start from chat {chat_id}")
    
    text = """üéØ **Bot de Iniciativas Saludia**

¬°Hola! Soy tu asistente de gesti√≥n de iniciativas para equipos internos de Saludia.

**üè¢ Saludia:** Marketplace que conecta droguer√≠as independientes con sellers y laboratorios.

**üìã Comandos principales:**
/iniciativas - Ver todas las iniciativas detalladas
/buscar <t√©rmino> - Buscar iniciativas espec√≠ficas
/crear - Crear nueva iniciativa
/analizar - An√°lisis AI del portfolio completo
/preguntar <pregunta> - Consultar al asistente AI

**üîç Ejemplos de b√∫squeda:**
‚Ä¢ `/buscar Product` - Iniciativas del equipo Product
‚Ä¢ `/buscar droguer√≠a` - Iniciativas relacionadas con droguer√≠as
‚Ä¢ `/buscar API` - Iniciativas de integraciones

**ü§ñ Consultas AI:**
‚Ä¢ "¬øQu√© gaps veo en el customer experience?"
‚Ä¢ "¬øC√≥mo balancear growth vs operational excellence?"
‚Ä¢ "¬øQu√© iniciativas faltan para mejorar seller experience?"

¬øEn qu√© puedo ayudarte hoy?"""
    
    send_telegram_message(chat_id, text, "Markdown")

def handle_help_command(chat_id):
    """Manejar comando /help"""
    logger.info(f"üì± /help from chat {chat_id}")
    
    text = """üÜò **Ayuda - Bot Saludia**

**üìã Gesti√≥n de Iniciativas:**
‚Ä¢ /iniciativas - Lista completa con m√©tricas detalladas
‚Ä¢ /buscar <t√©rmino> - Buscar por nombre, equipo, owner, etc.
‚Ä¢ /crear - Proceso guiado para nueva iniciativa

**ü§ñ Asistente AI especializado:**
‚Ä¢ /analizar - An√°lisis estrat√©gico del portfolio
‚Ä¢ /preguntar <pregunta> - Consultas espec√≠ficas
‚Ä¢ O simplemente escribe tu pregunta

**üîç B√∫squedas avanzadas:**
‚Ä¢ `/buscar Product team` - Por equipo
‚Ä¢ `/buscar GMV` - Por KPI
‚Ä¢ `/buscar seller` - Por t√©rmino en descripci√≥n
‚Ä¢ `/buscar Droguer√≠a portal` - Por portal

**üí° Ejemplos de preguntas AI:**
‚Ä¢ "¬øQu√© iniciativas impactan m√°s a las droguer√≠as?"
‚Ä¢ "¬øHay overlap entre equipos Product y Engineering?"
‚Ä¢ "¬øQu√© gaps veo en la experiencia de sellers?"
‚Ä¢ "¬øC√≥mo priorizar las iniciativas por ROI?"

**üéØ Contexto:** Todas las respuestas est√°n especializadas para el marketplace farmac√©utico de Saludia.

¬øQu√© necesitas consultar?"""
    
    send_telegram_message(chat_id, text, "Markdown")

def handle_list_initiatives(chat_id):
    """Manejar comando /iniciativas con informaci√≥n detallada"""
    logger.info(f"üì± /iniciativas from chat {chat_id}")
    
    try:
        data = get_initiatives()
        
        if not data.get("success"):
            send_telegram_message(chat_id, f"‚ùå Error: {data.get('error')}")
            return
        
        initiatives = data.get("data", [])
        
        if not initiatives:
            send_telegram_message(chat_id, "üì≠ No hay iniciativas disponibles en Saludia.")
            return
        
        # Agrupar por equipos para mejor organizaci√≥n
        teams = {}
        for init in initiatives:
            team = init.get('team', 'Sin equipo')
            if team not in teams:
                teams[team] = []
            teams[team].append(init)
        
        # Mostrar resumen primero
        summary_text = f"üìä **Portfolio Saludia - {len(initiatives)} iniciativas**\n\n"
        
        for team, team_initiatives in teams.items():
            summary_text += f"üë• **{team}:** {len(team_initiatives)} iniciativas\n"
        
        summary_text += f"\nüîç **Tip:** Usa `/buscar <t√©rmino>` para buscar espec√≠ficas"
        summary_text += f"\nü§ñ **Tip:** Usa `/analizar` para insights AI"
        
        send_telegram_message(chat_id, summary_text, "Markdown")
        
        # Mostrar primeras 5 iniciativas detalladas
        detailed_text = "üìã **Primeras 5 iniciativas detalladas:**\n\n"
        
        for i, initiative in enumerate(initiatives[:5], 1):
            detailed_text += format_initiative_detailed(initiative, i) + "\n\n"
        
        if len(initiatives) > 5:
            detailed_text += f"üìã *Mostrando 5 de {len(initiatives)}. Usa `/buscar` para encontrar espec√≠ficas.*"
        
        send_telegram_message(chat_id, detailed_text, "Markdown")
        
        logger.info(f"‚úÖ Listed {len(initiatives)} initiatives with details")
        
    except Exception as e:
        logger.error(f"‚ùå Error listing initiatives: {e}")
        send_telegram_message(chat_id, "‚ùå Error al obtener iniciativas.")

def handle_search_command(chat_id, query):
    """Manejar comando /buscar"""
    logger.info(f"üì± /buscar from chat {chat_id}: {query}")
    
    try:
        send_telegram_message(chat_id, f"üîç Buscando '{query}'...")
        
        result = search_initiatives(query)
        
        if not result.get("success"):
            send_telegram_message(chat_id, f"‚ùå Error en b√∫squeda: {result.get('error')}")
            return
        
        matching = result.get("results", [])
        total = result.get("total", 0)
        
        if not matching:
            # Sugerir b√∫squedas alternativas con AI
            ai_suggestion = query_llm(f"El usuario busc√≥ '{query}' pero no encontr√© resultados. Sugiere 3 t√©rminos de b√∫squeda alternativos relacionados con iniciativas de marketplace farmac√©utico.")
            
            no_results_text = f"üîç **Sin resultados para:** `{query}`\n\n"
            
            if ai_suggestion.get("success"):
                no_results_text += f"üí° **Sugerencias del AI:**\n{ai_suggestion.get('response')}\n\n"
            
            no_results_text += "**T√©rminos comunes:**\n‚Ä¢ Product, Engineering, Sales\n‚Ä¢ droguer√≠a, seller, laboratorio\n‚Ä¢ API, mobile, admin"
            
            send_telegram_message(chat_id, no_results_text, "Markdown")
            return
        
        # Mostrar resultados
        results_text = f"üîç **Resultados para:** `{query}`\n**Encontradas:** {total} iniciativas\n\n"
        
        # Mostrar hasta 5 resultados detallados
        for i, initiative in enumerate(matching[:5], 1):
            results_text += format_initiative_detailed(initiative, i) + "\n\n"
        
        if total > 5:
            results_text += f"üìã *Mostrando 5 de {total} resultados. Refina tu b√∫squeda para menos resultados.*\n\n"
        
        # Agregar insights AI sobre los resultados
        if len(matching) >= 2:
            ai_insight = query_llm(f"Analiza brevemente estos {len(matching)} resultados de b√∫squeda para '{query}' y proporciona 1-2 insights clave.", 
                                 json.dumps([{
                                     'name': init.get('initiative_name'),
                                     'team': init.get('team'),
                                     'kpi': init.get('main_kpi'),
                                     'owner': init.get('owner')
                                 } for init in matching[:5]], ensure_ascii=False))
            
            if ai_insight.get("success"):
                results_text += f"ü§ñ **Insight AI:**\n{ai_insight.get('response')}"
        
        send_telegram_message(chat_id, results_text, "Markdown")
        logger.info(f"‚úÖ Search '{query}' returned {total} results")
        
    except Exception as e:
        logger.error(f"‚ùå Error in search: {e}")
        send_telegram_message(chat_id, "‚ùå Error durante la b√∫squeda.")

def handle_analyze_command(chat_id):
    """Manejar comando /analizar"""
    logger.info(f"üì± /analizar from chat {chat_id}")
    
    try:
        send_telegram_message(chat_id, "ü§ñ Analizando portfolio de iniciativas de Saludia...")
        
        data = get_initiatives()
        
        if not data.get("success"):
            send_telegram_message(chat_id, f"‚ùå Error obteniendo datos: {data.get('error')}")
            return
        
        initiatives = data.get("data", [])
        
        if not initiatives:
            send_telegram_message(chat_id, "üì≠ No hay iniciativas para analizar.")
            return
        
        analysis = analyze_initiatives_with_llm(initiatives)
        
        response_text = f"ü§ñ **An√°lisis AI - Portfolio Saludia**\n**Iniciativas analizadas:** {len(initiatives)}\n\n{analysis}"
        
        # Telegram tiene l√≠mite de 4096 caracteres por mensaje
        if len(response_text) > 4000:
            # Dividir el mensaje
            parts = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    send_telegram_message(chat_id, part, "Markdown")
                else:
                    send_telegram_message(chat_id, f"**Continuaci√≥n {i+1}:**\n\n{part}", "Markdown")
        else:
            send_telegram_message(chat_id, response_text, "Markdown")
        
        logger.info(f"‚úÖ AI analysis completed for chat {chat_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in AI analysis: {e}")
        send_telegram_message(chat_id, "‚ùå Error durante el an√°lisis AI.")

def handle_ai_question(chat_id, question):
    """Manejar preguntas al AI"""
    logger.info(f"ü§ñ AI question from chat {chat_id}: {question}")
    
    try:
        send_telegram_message(chat_id, "ü§ñ Consultando al asistente AI de Saludia...")
        
        # Obtener contexto de iniciativas para la consulta
        data = get_initiatives()
        context = None
        
        if data.get("success") and data.get("data"):
            initiatives = data.get("data", [])[:10]  # Limitar contexto
            context_parts = []
            
            # Agrupar por equipos para contexto m√°s √∫til
            teams = {}
            for init in initiatives:
                team = init.get('team', 'Sin equipo')
                if team not in teams:
                    teams[team] = []
                teams[team].append(init)
            
            context_parts.append(f"CONTEXTO ACTUAL SALUDIA ({len(initiatives)} iniciativas):")
            for team, team_inits in teams.items():
                context_parts.append(f"\n{team}: {len(team_inits)} iniciativas")
                for init in team_inits[:3]:  # Max 3 por equipo en contexto
                    name = init.get('initiative_name', 'Sin nombre')
                    kpi = init.get('main_kpi', 'Sin KPI')
                    portal = init.get('portal', 'Sin portal')
                    context_parts.append(f"  ‚Ä¢ {name} (KPI: {kpi}, Portal: {portal})")
            
            context = "\n".join(context_parts)
        
        result = query_llm(question, context)
        
        if result.get("success"):
            response_text = f"ü§ñ **Respuesta del AI Saludia:**\n\n{result.get('response')}"
        else:
            response_text = f"‚ùå **Error:** {result.get('response', 'No se pudo consultar al AI.')}"
        
        # Manejar mensajes largos
        if len(response_text) > 4000:
            parts = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
            for part in parts:
                send_telegram_message(chat_id, part, "Markdown")
        else:
            send_telegram_message(chat_id, response_text, "Markdown")
        
        logger.info(f"‚úÖ AI response sent to chat {chat_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error handling AI question: {e}")
        send_telegram_message(chat_id, "‚ùå Error consultando al asistente AI.")

def handle_create_command(chat_id, user_id):
    """Manejar comando /crear"""
    logger.info(f"üì± /crear from user {user_id}")
    
    user_states[user_id] = {'step': 'name', 'data': {}, 'chat_id': chat_id}
    
    text = """üÜï **Crear Nueva Iniciativa Saludia**

Te guiar√© paso a paso para crear una iniciativa optimizada para nuestro marketplace.

**Paso 1 de 6:** ¬øCu√°l es el nombre de la iniciativa?

üí° **Ejemplos para Saludia:**
‚Ä¢ "Seller Onboarding Automation"
‚Ä¢ "Droguer√≠a Mobile Experience Upgrade"
‚Ä¢ "Inventory Sync API v2"

ü§ñ **Tip:** Escribe "sugerir nombres" si necesitas ideas del AI"""
    
    send_telegram_message(chat_id, text, "Markdown")

def handle_text_message(chat_id, user_id, text):
    """Manejar mensajes de texto para creaci√≥n"""
    if user_id not in user_states:
        return
    
    state = user_states[user_id]
    step = state['step']
    
    logger.info(f"üìù Step '{step}' for user {user_id}")
    
    try:
        if step == 'name':
            if text.lower() in ['sugerir nombres', 'sugerir', 'ayuda nombres']:
                # Sugerir nombres con AI
                ai_suggestion = query_llm("Sugiere 5 nombres creativos para nuevas iniciativas de Saludia marketplace, considerando diferentes equipos y objetivos como growth, operational efficiency, customer experience, etc.")
                
                if ai_suggestion.get("success"):
                    suggestion_text = f"ü§ñ **Sugerencias de nombres:**\n\n{ai_suggestion.get('response')}\n\nüìù **Escribe el nombre que prefieras:**"
                    send_telegram_message(chat_id, suggestion_text, "Markdown")
                else:
                    send_telegram_message(chat_id, "‚ùå Error obteniendo sugerencias. Escribe el nombre de tu iniciativa:")
                return
            
            state['data']['initiative_name'] = text
            state['step'] = 'description'
            response = f"‚úÖ **Nombre:** {text}\n\n**Paso 2 de 6:** ¬øCu√°l es la descripci√≥n de la iniciativa?\n\nüí° **Incluye:** Objetivo, beneficio para droguer√≠as/sellers, impacto esperado"
            
        elif step == 'description':
            state['data']['description'] = text
            state['step'] = 'kpi'
            response = "‚úÖ **Descripci√≥n guardada**\n\n**Paso 3 de 6:** ¬øCu√°l es el KPI principal?\n\nüí° **KPIs comunes en Saludia:**\n‚Ä¢ GMV, Take Rate, Conversion Rate\n‚Ä¢ User Retention, NPS, Time to Onboard\n‚Ä¢ Order Volume, Inventory Turnover"
            
        elif step == 'kpi':
            state['data']['main_kpi'] = text
            state['step'] = 'portal'
            response = f"‚úÖ **KPI:** {text}\n\n**Paso 4 de 6:** ¬øEn qu√© portal/producto impacta?\n\nüí° **Portales Saludia:**\n‚Ä¢ Droguer√≠a (app compradores)\n‚Ä¢ Seller (app vendedores)\n‚Ä¢ Admin (panel interno)\n‚Ä¢ Mobile (apps m√≥viles)\n‚Ä¢ API (integraciones)"
            
        elif step == 'portal':
            state['data']['portal'] = text
            state['step'] = 'owner'
            response = f"‚úÖ **Portal:** {text}\n\n**Paso 5 de 6:** ¬øQui√©n es el owner/l√≠der de esta iniciativa?\n\nüí° **Puede ser una persona espec√≠fica o rol**"
            
        elif step == 'owner':
            state['data']['owner'] = text
            state['step'] = 'team'
            response = f"‚úÖ **Owner:** {text}\n\n**Paso 6 de 6:** ¬øQu√© equipo ser√° responsable?\n\nüí° **Equipos Saludia:**\n‚Ä¢ Product, Engineering, Operations\n‚Ä¢ Sales, Marketing, Customer Success\n‚Ä¢ Data/Analytics"
            
        elif step == 'team':
            state['data']['team'] = text
            await finish_creation(chat_id, user_id)
            return
        
        send_telegram_message(chat_id, response, "Markdown")
        
    except Exception as e:
        logger.error(f"‚ùå Error handling text: {e}")
        send_telegram_message(chat_id, "‚ùå Error procesando respuesta.")
        if user_id in user_states:
            del user_states[user_id]

async def finish_creation(chat_id, user_id):
    """Finalizar creaci√≥n con sugerencias AI"""
    try:
        state = user_states[user_id]
        data = state['data']
        
        # Sugerir m√©tricas optimizadas con AI
        ai_metrics = query_llm(f"Para la iniciativa '{data['initiative_name']}' del equipo {data['team']} de Saludia marketplace, sugiere valores realistas (0-1) para reach, impact, confidence y effort. Considera el contexto del marketplace farmac√©utico.")
        
        # Valores por defecto mejorados para marketplace
        default_metrics = {
            'reach': 0.6,  # Alcance moderado t√≠pico
            'impact': 0.7,  # Impacto esperado alto
            'confidence': 0.8,  # Confianza alta en execution
            'effort': 0.5   # Esfuerzo medio
        }
        
        data.update(default_metrics)
        
        # Mostrar resumen con sugerencias AI
        summary = f"üìã **Resumen de Iniciativa Saludia:**\n\n"
        summary += f"üéØ **Nombre:** {data['initiative_name']}\n"
        summary += f"üìù **Descripci√≥n:** {data['description']}\n"
        summary += f"üìä **KPI:** {data['main_kpi']}\n"
        summary += f"üñ•Ô∏è **Portal:** {data['portal']}\n"
        summary += f"üë§ **Owner:** {data['owner']}\n"
        summary += f"üë• **Equipo:** {data['team']}\n\n"
        summary += f"üìà **M√©tricas (auto-calculadas):**\n"
        summary += f"‚Ä¢ Alcance: {data['reach']*100:.0f}%\n"
        summary += f"‚Ä¢ Impacto: {data['impact']*100:.0f}%\n"
        summary += f"‚Ä¢ Confianza: {data['confidence']*100:.0f}%\n"
        summary += f"‚Ä¢ Esfuerzo: {data['effort']*100:.0f}%\n\n"
        
        if ai_metrics.get("success"):
            summary += f"ü§ñ **Sugerencias AI:**\n{ai_metrics.get('response')}\n\n"
        
        summary += "‚è≥ **Creando iniciativa...**"
        
        send_telegram_message(chat_id, summary, "Markdown")
        
        # Crear la iniciativa
        result = create_initiative(data)
        
        if result.get("success"):
            success_text = f"üéâ **¬°Iniciativa creada en Saludia!**\n\n"
            success_text += f"**{data['initiative_name']}** ha sido agregada al portfolio.\n\n"
            success_text += "üìã **Pr√≥ximos pasos:**\n"
            success_text += "‚Ä¢ Usa `/analizar` para ver impacto en portfolio\n"
            success_text += "‚Ä¢ Usa `/buscar {data['team']}` para ver iniciativas del equipo\n"
            success_text += "‚Ä¢ Pregunta al AI sobre sinergias con otras iniciativas"
        else:
            success_text = f"‚ùå **Error al crear iniciativa:**\n{result.get('error', 'Error desconocido')}\n\nIntenta de nuevo con `/crear`"
        
        send_telegram_message(chat_id, success_text, "Markdown")
        
        if user_id in user_states:
            del user_states[user_id]
            
        logger.info(f"‚úÖ Finished creation for user {user_id}")
    
    except Exception as e:
        logger.error(f"‚ùå Error finishing creation for user {user_id}: {e}")
        error_text = f"‚ùå **Error al crear la iniciativa**\n\nError t√©cnico: {str(e)}\n\nIntenta de nuevo con `/crear`"
        send_telegram_message(chat_id, error_text, "Markdown")
        if user_id in user_states:
            del user_states[user_id]

@app.route('/test')
def test():
    """Test del sistema"""
    nocodb_test = get_initiatives()
    search_test = search_initiatives("test", "all") if nocodb_test.get("success") else {"success": False}
    
    return jsonify({
        "test": "OK",
        "timestamp": datetime.now().isoformat(),
        "company": "Saludia Marketplace",
        "nocodb_connection": "OK" if nocodb_test.get('success') else "FAILED",
        "initiatives_count": len(nocodb_test.get('data', [])) if nocodb_test.get('success') else 0,
        "search_functionality": "OK" if search_test.get('success') else "FAILED",
        "telegram_webhook_configured": bot_configured,
        "ai_configured": bool(GROQ_API_KEY),
        "features": [
            "detailed_initiative_listing",
            "advanced_search",
            "ai_analysis",
            "contextual_recommendations",
            "saludia_marketplace_optimization"
        ]
    })

# ===== INICIO =====

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    
    print(f"üöÄ Starting Saludia Initiatives MCP Server on port {port}")
    print(f"üè¢ Company: Saludia Marketplace (Droguer√≠as + Sellers + Laboratorios)")
    print(f"üéØ Purpose: Internal teams initiatives management")
    print(f"ü§ñ Telegram webhook: {WEBHOOK_URL}/telegram-webhook")
    print(f"üß† AI Assistant: {'Configured with Saludia context' if GROQ_API_KEY else 'Not configured'}")
    print(f"üîç Features: Advanced search, detailed listings, AI analysis")
    
    # Iniciar Flask
    app.run(host='0.0.0.0', port=port, debug=False)
